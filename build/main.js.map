{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["\"use strict\";\n\n/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { Period } from \"./models/period\"\nimport { TempTarget } from \"./models/tempTarget\";\nimport { Tracing } from \"trace_events\";\n\nclass Heizungssteuerung extends utils.Adapter {\n\troomNames: string[];\n\trooms: Record<string, any>;\n\ttempSensorMap!: Map<string, string>;\n\thumSensorMap!: Map<string, string>;\n\tengineMap!: Map<string, string>;\n\tinterval!: ioBroker.Interval;\n\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"heizungssteuerung\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t\tthis.roomNames = [];\n\t\tthis.rooms = {};\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tasync onReady() {\n\t\tthis.rooms = await this.getEnumAsync(\"rooms\");\n\t\tthis.roomNames = this.buildRoomNames();\n\t\tthis.tempSensorMap = await this.buildFunctionToRoomMap(\"enum.functions.temperature\", \"Temperature\");\n\t\tthis.humSensorMap = await this.buildFunctionToRoomMap(\"enum.functions.humidity\", \"Humidity\");\n\t\tthis.engineMap = await this.buildFunctionToRoomMap(\"enum.functions.engine\", \"Engine\");\n\t\tthis.log.debug(\"tempSensorMap created: \" + JSON.stringify(this.tempSensorMap));\n\t\tthis.log.debug(\"humSensorMap created: \" + JSON.stringify(this.humSensorMap));\n\t\tthis.log.debug(\"engineMap created: \" + JSON.stringify(this.engineMap));\n\n\t\tthis.initGeneralStates();\n\t\tthis.initRoomStates();\n\t\tif (this.config.resetTemperaturesOnStart) {\n\t\t\tthis.writeInitialTemperaturesIntoState();\n\t\t}\n\n\t\tif (this.interval != undefined) {\n\t\t\tthis.clearInterval(this.interval);\n\t\t}\n\t\tthis.interval = this.setInterval(this.check.bind(this), this.config.updateIntervall * 1000);\n\t}\n\n\tprivate async check(): Promise<void> {\n\t\tconst now = new Date().toLocaleTimeString([], { hourCycle: \"h23\", hour: \"2-digit\", minute: \"2-digit\" });\n\t\tthis.log.debug(\"current time is \" + now);\n\t\tconst boostedRooms = await this.buildSpecialRoomsList(\"boost\", this.config.boostIntervall);\n\t\tconst pausedRooms = await this.buildSpecialRoomsList(\"pause\", this.config.pauseIntervall);\n\t\tconst roomTempMap = await this.buildDefaultRoomTempMap(now);\n\n\t\t//-------------------------------------------------\n\t\t// check pause all\n\t\t//-------------------------------------------------\n\t\tconst pauseAll = await this.getStateAsync(\"Actions.pauseAll\");\n\t\tif (pauseAll != undefined && pauseAll.val == true) {\n\t\t\tif (pauseAll.ts > new Date().getTime() - (this.config.pauseIntervall * 60000)) {\n\t\t\t\tthis.log.info(\"State pauseAll is active so all engines will be deactivated\");\n\t\t\t\tthis.roomNames.forEach((value) => pausedRooms.push(value));\n\t\t\t} else {\n\t\t\t\tthis.setStateAsync(\"Actions.pauseAll\", false);\n\t\t\t\tthis.log.info(\"State pauseAll was deactivated\");\n\t\t\t}\n\t\t}\n\n\t\t//-------------------------------------------------\n\t\t// check boost all\n\t\t//-------------------------------------------------\n\t\tconst boostAll = await this.getStateAsync(\"Actions.boostAll\");\n\t\tif (boostAll != undefined && boostAll.val == true) {\n\t\t\tif (boostAll.ts > new Date().getTime() - (this.config.boostIntervall * 60000)) {\n\t\t\t\tthis.log.info(\"State boostAll is active so all engines will be deactivated\");\n\t\t\t\tthis.roomNames.forEach((value) => boostedRooms.push(value));\n\t\t\t} else {\n\t\t\t\tthis.setStateAsync(\"Actions.boostAll\", false);\n\t\t\t\tthis.log.info(\"State boostAll was deactivated\");\n\t\t\t}\n\t\t}\n\n\n\t\tthis.roomNames.forEach((currentRoom) => this.fillRommTemperatures(currentRoom, pausedRooms, boostedRooms, roomTempMap, now));\n\n\t\tthis.log.debug(\"Temperatures will be set like: \" + JSON.stringify(roomTempMap));\n\n\t\tfor (let i = 0; i < this.roomNames.length; i++) {\n\t\t\tthis.setTemperatureForRoom(this.roomNames[i], roomTempMap.get(this.roomNames[i])!);\n\t\t}\n\t}\n\n\tprivate fillRommTemperatures(currentRoom: string, pausedRooms: Array<string>, boostedRooms: Array<string>, roomTempMap: Map<string, TempTarget>, now: string) {\n\t\tthis.log.debug(\"start check for \" + currentRoom);\n\n\t\tif (pausedRooms.includes(currentRoom)) {\n\t\t\tthis.log.debug(currentRoom + \" is paused\");\n\t\t\troomTempMap.set(currentRoom, { \"temp\": -100, \"until\": \"pause\" });\n\t\t\treturn;\n\t\t}\n\t\tif (boostedRooms.includes(currentRoom)) {\n\t\t\tthis.log.debug(currentRoom + \" is boosed\");\n\t\t\troomTempMap.set(currentRoom, { \"temp\": 100, \"until\": \"boost\" });\n\t\t\treturn;\n\t\t}\n\n\t\tconst periodsForRoom = this.getPeriodsForRoom(currentRoom);\n\t\tthis.log.debug(\"found following periods for room \" + currentRoom + \": \" + JSON.stringify(periodsForRoom));\n\t\tperiodsForRoom.forEach((period) => {\n\t\t\tif (period.from > now && (period.from < roomTempMap.get(currentRoom)!.until)) {\n\t\t\t\tthis.log.debug(\"targetUntil for room \" + currentRoom + \" will be set to \" + period.from);\n\t\t\t\troomTempMap.get(currentRoom)!.until = period.from;\n\t\t\t}\n\t\t\tif (roomTempMap.get(currentRoom)!.until > now && roomTempMap.get(currentRoom)!.until != \"24:00\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((this.config.isHeatingMode == 0) == period.heating && this.isCurrentPeriod(period, now)) {\n\t\t\t\tthis.log.debug(\"The period is matching \" + JSON.stringify(period));\n\t\t\t\troomTempMap.set(currentRoom, { \"temp\": period[\"temp\"], \"until\": period[\"until\"] });\n\t\t\t} else {\n\t\t\t\tthis.log.debug(\"The period is not matching \" + JSON.stringify(period));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} roomName name of the room\n\t */\n\tprivate getPeriodsForRoom(roomName: string) {\n\t\tconst periods = new Array<Period>();\n\t\t(this.config.periods as Period[]).forEach((period) => {\n\t\t\tif (period.room == (\"enum.rooms.\" + roomName)) {\n\t\t\t\tperiods.push(period);\n\t\t\t}\n\t\t});\n\t\treturn periods;\n\t}\n\n\t/**\n\t * @param {string } now current time as string formatted as \"HH:MM\"\n\t */\n\tasync buildDefaultRoomTempMap(now: string): Promise<Map<string, TempTarget>> {\n\t\tconst roomTempMap = new Map<string, TempTarget>();\n\t\tfor (let i = 0; i < this.roomNames.length; i++) {\n\t\t\tconst room = this.roomNames[i];\n\t\t\tconst targetTemperatureFromState = await this.getStateAsync(\"Temperatures.\" + room + \".target\");\n\t\t\tconst targetTemperatureUntilFromState = await this.getStateAsync(\"Temperatures.\" + room + \".targetUntil\");\n\t\t\tif (targetTemperatureFromState == undefined || targetTemperatureUntilFromState == undefined) {\n\t\t\t\troomTempMap.set(room, { \"temp\": this.config.defaultTemperature, \"until\": \"24:00\" });\n\t\t\t} else {\n\t\t\t\tthis.log.debug(\"Target until from state is \" + JSON.stringify(targetTemperatureUntilFromState));\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (targetTemperatureUntilFromState.val < now || targetTemperatureUntilFromState.val == \"boost\" || targetTemperatureUntilFromState.val == \"pause\") {\n\t\t\t\t\tthis.log.debug(\"Target until was set to 24:00\");\n\t\t\t\t\troomTempMap.set(room, { \"temp\": this.config.defaultTemperature, \"until\": \"24:00\" });\n\t\t\t\t} else {\n\t\t\t\t\troomTempMap.set(room, { \"temp\": Number(targetTemperatureFromState.val), \"until\": String(targetTemperatureUntilFromState.val) });\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\treturn roomTempMap;\n\t}\n\n\t/**\n\t * @param {string} functionId id of the function\n\t * @param {string} functionName name of the function\n\t */\n\tprivate async buildFunctionToRoomMap(functionId: string, functionName: string): Promise<Map<string, string>> {\n\t\tthis.setForeignObjectNotExists(functionId, { \"type\": \"enum\", \"common\": { \"name\": functionName, \"members\": [] }, \"native\": {}, \"_id\": functionId });\n\t\tconst functionToRoomMap = new Map<string, string>();\n\t\tconst funcTemp = await this.getForeignObjectAsync(functionId);\n\n\t\tif (funcTemp == undefined) {\n\t\t\treturn functionToRoomMap;\n\t\t}\n\n\t\tfor (let i = 0; i < funcTemp.common[\"members\"].length; i++) {\n\t\t\tfor (let j = 0; j < this.roomNames.length; j++) {\n\t\t\t\tfor (let k = 0; k < this.rooms.result[\"enum.rooms.\" + this.roomNames[j]][\"common\"][\"members\"].length; k++) {\n\t\t\t\t\tif (this.rooms.result[\"enum.rooms.\" + this.roomNames[j]][\"common\"][\"members\"][k] == funcTemp[\"common\"][\"members\"][i]) {\n\t\t\t\t\t\tfunctionToRoomMap.set(this.roomNames[j], funcTemp[\"common\"][\"members\"][i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn functionToRoomMap;\n\t}\n\n\t/**\n\t * @param {string} room current room name\n\t * @param {{ [x: string]: any; }} targetTemperature map including target temperatures\n\t */\n\tasync setTemperatureForRoom(room: string, targetTemperature: TempTarget) {\n\t\tif (this.tempSensorMap.get(room) == undefined) {\n\t\t\tthis.log.info(\"Temperature sensor for room \" + room + \" not found\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.engineMap.get(room) == undefined) {\n\t\t\tthis.log.info(\"Engine for room \" + room + \" not found\");\n\t\t\treturn;\n\t\t}\n\t\tconst tempState = await this.getForeignStateAsync(this.tempSensorMap.get(room)!);\n\t\tif (tempState == undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst temp = Number(tempState.val);\n\t\tthis.log.debug(\"In \" + room + \" it is \" + temp + \" and should be \" + targetTemperature.temp);\n\n\t\tif (temp == null) {\n\t\t\tthis.log.warn(\"Temperature for room \" + room + \" is not defined\");\n\t\t\treturn;\n\t\t}\n\t\tlet humidity = await this.getForeignStateAsync(this.humSensorMap.get(room)!);\n\n\t\tthis.writeTemperaturesIntoState(room, temp, humidity!, targetTemperature);\n\n\t\tif (this.config.isHeatingMode == 0) {\n\t\t\tif (temp < (targetTemperature.temp - this.config.startStopDifference)) {\n\t\t\t\tthis.log.debug(\"set \" + this.engineMap.get(room) + \" to true\");\n\t\t\t\tthis.setForeignStateAsync(this.engineMap.get(room)!, true);\n\t\t\t}\n\t\t\tif (temp > (targetTemperature.temp + this.config.startStopDifference)) {\n\t\t\t\tthis.log.debug(\"set \" + this.engineMap.get(room) + \" to false\");\n\t\t\t\tthis.setForeignStateAsync(this.engineMap.get(room)!, false);\n\t\t\t}\n\t\t} else {\n\n\t\t\tif (humidity != undefined && humidity.val != undefined && this.config.stopCoolingIfHumIsHigherThan < Number(humidity.val)) {\n\t\t\t\tthis.log.info(\"Deactivate engine for \" + room + \" because humidity maximum reached\");\n\t\t\t\tthis.setForeignStateAsync(this.engineMap.get(room)!, false);\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tif (temp < (targetTemperature.temp - this.config.startStopDifference)) {\n\t\t\t\tthis.log.debug(\"set \" + this.engineMap.get(room) + \" to false\");\n\t\t\t\tthis.setForeignStateAsync(this.engineMap.get(room)!, false);\n\t\t\t}\n\t\t\tif (temp > (targetTemperature.temp + this.config.startStopDifference)) {\n\t\t\t\tthis.log.debug(\"set \" + this.engineMap.get(room) + \" to true\");\n\t\t\t\tthis.setForeignStateAsync(this.engineMap.get(room)!, true);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {string} actionName name of the current action\n\t * @param {number} validIntervall time until action is not valid\n\t */\n\tprivate async buildSpecialRoomsList(actionName: string, validIntervall: number): Promise<Array<string>> {\n\t\tconst boostedRooms = new Array<string>();\n\t\tconst boostValidUntil = new Date().getTime() - (validIntervall * 60000);\n\t\tthis.log.debug(\"validIntervall: \" + validIntervall);\n\t\tfor (let i = 0; i < this.roomNames.length; i++) {\n\t\t\tconst boost = await this.getStateAsync(\"Actions.\" + this.roomNames[i] + \".\" + actionName);\n\t\t\tif (boost != undefined && boost.val == true) {\n\t\t\t\tif (boost.ts > boostValidUntil) {\n\t\t\t\t\tboostedRooms.push(this.roomNames[i]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setStateAsync(\"Actions.\" + this.roomNames[i] + \".\" + actionName, false);\n\t\t\t\t\tthis.setState(\"Temperatures.\" + this.roomNames[i] + \".targetUntil\", \"00:00\", true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn boostedRooms;\n\t}\n\n\tinitRoomStates() {\n\t\tfor (let i = 0; i < this.roomNames.length; i++) {\n\t\t\tconst roomName = this.roomNames[i];\n\t\t\tthis.setObjectNotExists(\"Actions.\" + roomName + \".boost\", { type: \"state\", _id: \"Actions.\" + roomName + \".boost\", native: {}, common: { type: \"boolean\", name: \"Activate boost for this room\", read: true, write: true, role: \"admin\", def: false } });\n\t\t\tthis.setObjectNotExists(\"Actions.\" + roomName + \".pause\", { type: \"state\", _id: \"Actions.\" + roomName + \".pause\", native: {}, common: { type: \"boolean\", name: \"Activate pause for this room\", read: true, write: true, role: \"admin\", def: false } });\n\t\t}\n\t}\n\n\tinitGeneralStates() {\n\t\tthis.setObjectNotExists(\"Actions.pauseAll\", { type: \"state\", _id: \"Actions.pauseAll\", native: {}, common: { type: \"boolean\", name: \"Activate boost for any room\", read: true, write: true, role: \"admin\", def: false } });\n\t\tthis.setObjectNotExists(\"Actions.boostAll\", { type: \"state\", _id: \"Actions.boostAll\", native: {}, common: { type: \"boolean\", name: \"Activate boost for any room\", read: true, write: true, role: \"admin\", def: false } });\n\t}\n\n\t/**\n\t * @param {string} room name of the room\n\t * @param {number} temp temperature to set\n\t * @param {ioBroker.State | null | undefined} humidity State including current humidity\n\t * @param {{ [x: string]: any; }} targetTemperature target temperature map\n\t */\n\twriteTemperaturesIntoState(room: string, temp: number, humidity: ioBroker.State, targetTemperature: TempTarget) {\n\t\tthis.setStateAsync(\"Temperatures.\" + room + \".current\", Number(temp), true);\n\t\tif (humidity != undefined && humidity.val != undefined) {\n\t\t\tthis.setStateAsync(\"Temperatures.\" + room + \".currentHumidity\", Number(humidity.val), true);\n\t\t}\n\t\tthis.setStateAsync(\"Temperatures.\" + room + \".target\", targetTemperature.temp, true);\n\t\tthis.setStateAsync(\"Temperatures.\" + room + \".targetUntil\", targetTemperature.temp, true);\n\t}\n\n\twriteInitialTemperaturesIntoState() {\n\t\tthis.roomNames.forEach((room) => {\n\t\t\tthis.setObjectNotExists(\"Temperatures.\" + room + \".current\", { type: \"state\", _id: \"Temperatures.\" + room + \".current\", native: {}, common: { type: \"number\", name: \"Current temperature\", read: true, write: false, role: \"admin\" } });\n\t\t\tthis.setObjectNotExists(\"Temperatures.\" + room + \".currentHumidity\", { type: \"state\", _id: \"Temperatures.\" + room + \".currentHumidity\", native: {}, common: { type: \"number\", name: \"Current humidity\", read: true, write: false, role: \"admin\" } });\n\t\t\tthis.setObjectNotExists(\"Temperatures.\" + room + \".target\", { type: \"state\", _id: \"Temperatures.\" + room + \".target\", native: {}, common: { type: \"number\", name: \"Target temperature\", read: true, write: true, role: \"admin\" } });\n\t\t\tthis.setObjectNotExists(\"Temperatures.\" + room + \".targetUntil\", { type: \"state\", _id: \"Temperatures.\" + room + \".target\", native: {}, common: { type: \"string\", name: \"Target temperature until\", read: true, write: true, role: \"admin\" } });\n\t\t});\n\t\tthis.roomNames.forEach((room) => {\n\t\t\tthis.setStateAsync(\"Temperatures.\" + room + \".target\", this.config.defaultTemperature, true);\n\t\t\tthis.setStateAsync(\"Temperatures.\" + room + \".targetUntil\", \"24:00\", true);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} room name of the room\n\t */\n\tconvertToShortRoomName(room: string) {\n\t\tconst shortRoomNameParts = room.split(\".\");\n\t\treturn shortRoomNameParts[shortRoomNameParts.length - 1];\n\t}\n\n\tbuildRoomNames() {\n\t\tconst longRoomNames = Object.keys(this.rooms.result);\n\t\tconst shortRoomNames = [];\n\t\tfor (let i = 0; i < longRoomNames.length; i++) {\n\t\t\tshortRoomNames.push(this.convertToShortRoomName(longRoomNames[i]));\n\t\t}\n\t\treturn shortRoomNames;\n\n\t}\n\n\t/**\n\t * @param {any[]} period array of period definitions\n\t * @param {string | number} now\n\t */\n\tisCurrentPeriod(period: Period, now: string) {\n\t\tlet day = new Date().getDay() - 1;\n\t\tday = day < 0 ? 6 : day;\n\n\n\t\tif (!this.isPeriodActiveToday(period, day)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (now < period.from || now > period.until) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate isPeriodActiveToday(period: Period, day: number): boolean {\n\t\tswitch (day) {\n\t\t\tcase 0: {\n\t\t\t\treturn period[0];\n\t\t\t}\n\t\t\tcase 1: {\n\t\t\t\treturn period[1];\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\treturn period[2];\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\treturn period[3];\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\treturn period[4];\n\t\t\t}\n\t\t\tcase 5: {\n\t\t\t\treturn period[5];\n\t\t\t}\n\t\t\tcase 6: {\n\t\t\t\treturn period[6];\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t * @param {() => void} callback\n\t */\n\tonUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\tif (this.interval != undefined) {\n\t\t\t\tthis.clearInterval(this.interval);\n\t\t\t}\n\t\t\tthis.connected = false;\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Heizungssteuerung(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Heizungssteuerung())();\n}"],
  "mappings": "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",
  "names": []
}
